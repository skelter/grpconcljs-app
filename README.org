#+TITLE: gRPC-Web with ClojureScript

This should have been easy...but ran into problems.  Most of this is likely my ignorance of how the javascript
world shifted while I was looking at other things.

1. We will design a quick little protocol for a client to get a stream of events.
2. We will generate the javascript for the protocol.
3. We will use that from clojurescript.

* Protocol

 See [[./protos/entityevents.proto]].

#+begin_src 
service EntityMonitor {
  rpc Subscribe(SubscribeReq) returns (stream EntityEvent);
  }
...
#+end_src 

* Step 1: Scaffold
  - [X] Init a shadow-cljs project
    - use ~npx create-cljs-project ...~ as described in shadow-cljs README.
  - [X] create simple proto file.

* Step 2: Build the gRPC communication code

We will need gRPC's [[https://grpc.io/docs/protoc-installation/#install-using-a-package-manager][protoc compiler]].
 
We will also need the grpc web plugin from [[https://github.com/grpc/grpc-web/releases][here]].

#+begin_example
$ grpconcljs-app git:(main) ✗  protoc --version
libprotoc 3.0.0
#+end_example.
I think we are ready to go.

#+begin_src sh
mkdir -p protos.out

protoc protos/entityevents.proto \
  --js_out=import_style=closure:protos.out \
  --grpc-web_out=import_style=closure,mode=grpcwebtext:protos.out 
#+end_src

This generated some javascript.  
- new file:   protos.out/entity.js
- new file:   protos.out/entityevent.js
- new file:   protos.out/entityeventcode.js
- new file:   protos.out/protos/entityevents_grpc_web_pb.js
- new file:   protos.out/subscribereq.js

Hmmm using 3.0.0 may not have bugs worked out.  So downloaded 3.19.4.

#+begin_example
$  grpconcljs-app git:(main)  protoc --version                                
libprotoc 3.19.4

$  grpconcljs-app git:(main) ✗  rm -rfv protos.out/*
zsh: sure you want to delete all 5 files in /home/skelter/work/grpconcljs-app/protos.out [yn]? y
removed 'protos.out/entityeventcode.js'
removed 'protos.out/entityevent.js'
removed 'protos.out/entity.js'
removed 'protos.out/protos/entityevents_grpc_web_pb.js'
removed directory 'protos.out/protos'
removed 'protos.out/subscribereq.js'
$  grpconcljs-app git:(main) ✗  protoc protos/entityevents.proto \
  --js_out=import_style=closure:protos.out \
  --grpc-web_out=import_style=closure,mode=grpcwebtext:protos.out
$  grpconcljs-app git:(main) ✗  git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   protos.out/entity.js
	modified:   protos.out/entityevent.js
	modified:   protos.out/entityeventcode.js
	modified:   protos.out/subscribereq.js

#+end_example

* Step 3: Basic clojurescript app
  Follow steps in [[https://github.com/thheller/shadow-cljs][shadow-cljs README]] to set up simplest app
  - [X] app.cljs
  - [X] add to shadow-cljs.edn
  - [X] create public/index.html
  - [X] add dev-http server to shadow-cljs.edn
* Step 4: Use the communication code from CLJS
  We know we will need to add grpc-web with npm. We probably need to add
 protobufs.

#+begin_example
➜  grpconcljs-app git:(main)$  npm install grpc-web
+ grpc-web@1.3.1
added 1 package from 1 contributor and audited 98 packages in 1.715s

3 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

#+end_example

I launched shadow-cljs watch frontend.
Checking main.js, no mention of grpc or npm yet.

** copy proto code in
#+begin_example
$ mkdir src/main/proto
$ cp protos.out/protos/entityevents_grpc_web_pb.js src/main/proto

#+end_example

** app.cljs
Let's go edit app.cljs.

#+begin_src clojure
(ns acme.frontend.app
  (:require [acme.myproto]))
#+end_src

#+begin_src clojure
(ns acme.myproto
  (:require [proto.entityevents :refer (EntityMonitorClient)]))
#+end_src


Noting complaint from shadow-cljs watch:
#+begin_example
[:frontend] Build failure:
The required namespace "proto.entityevents" is not available, it was required by "acme/myproto.cljs".
#+end_example

Restart watcher; no change.

As I understand it, we should be able to drop in .js files /in the classpath/
and have them found, but the .js files cannot be in the same folder.  

- see 12.2.1 Requiring JS

When I try to use a string refer, I get a complaint about 
not being a symbol.

#+begin_example
[:frontend] Compiling ...
-> Resolving Module: :main
[2022-02-01 13:02:31.185 - WARNING] :shadow.cljs.devtools.server.util/handle-ex - {:msg {:type :start-autobuild}}
AssertionError Assert failed: (symbol? sym)
	shadow.build.data/add-string-lookup (data.clj:121)
	shadow.build.data/add-string-lookup (data.clj:121)
	shadow.build.resolve/resolve-string-require (resolve.clj:473)
	shadow.build.resolve/resolve-string-require (resolve.clj:435)
	shadow.build.resolve/resolve-require (resolve.clj:672)
	shadow.build.resolve/resolve-require (resolve.clj:665)
	shadow.build.resolve/resolve-deps/fn--11716 (resolve.clj:51)
	clojure.lang.PersistentVector.reduce (PersistentVector.java:343)
	clojure.core/reduce (core.clj:6829)
	clojure.core/reduce (core.clj:6812)
	shadow.cljs.util/reduce-> (util.clj:45)
	shadow.cljs.util/reduce-> (util.clj:44)

#+end_example


* Problem: Why can't we find grpc.web.MethodDescriptor
I am working toward reproducing this problem with this sanitized
project but we aren't there yet.
