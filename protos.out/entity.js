/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.entityevents.Entity');

goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entityevents.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entityevents.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.entityevents.Entity.displayName = 'proto.entityevents.Entity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entityevents.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.entityevents.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entityevents.Entity} msg The msg instance to transform.
 * @return {!Object}
 */
proto.entityevents.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitytype: msg.getEntitytype(),
    entityid: msg.getEntityid(),
    attributesMap: (f = msg.getAttributesMap(true)) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.entityevents.Entity} The clone.
 */
proto.entityevents.Entity.prototype.cloneMessage = function() {
  return /** @type {!proto.entityevents.Entity} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string entityType = 1;
 * @return {string}
 */
proto.entityevents.Entity.prototype.getEntitytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.entityevents.Entity.prototype.setEntitytype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string entityId = 2;
 * @return {string}
 */
proto.entityevents.Entity.prototype.getEntityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.entityevents.Entity.prototype.setEntityid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * map<string, string> attributes = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.entityevents.Entity.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate));
};


